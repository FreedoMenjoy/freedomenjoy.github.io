{"version":3,"sources":["scripts/util/forceQuerySelector.ts","scripts/openbox.ts","scripts/util/math.ts","scripts/testScore.ts"],"names":[],"mappings":"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","file":"testScore.7fff994a.js","sourceRoot":"../src","sourcesContent":["export function forceQuerySelector<E extends Element = Element> (selector: string, origin: Pick<HTMLElement, 'querySelector'> = document): E {\n  const element = origin.querySelector<E>(selector);\n  if (element == null) {\n    throw new Error(`${forceQuerySelector.name}: selector ${selector} not found`);\n  }\n  return element;\n}\n\nexport function forceGetElementById<E extends Element = Element> (elementId: string, origin: NonElementParentNode = document): E {\n  const element = origin.getElementById(elementId);\n  if (element == null) {\n    throw new Error(`${forceGetElementById.name}: id ${elementId} not found`);\n  }\n  return element as E;\n}\n\nObject.assign(window, { forceQuerySelector, forceGetElementById });\n","import { forceQuerySelector } from './util/forceQuerySelector';\n\nexport function openbox (selector: string): void {\n  const element = forceQuerySelector<HTMLElement>(selector);\n  element.style.display = 'block';\n}\n\nexport function closebox (selector: string): void {\n  const element = forceQuerySelector<HTMLElement>(selector);\n  element.style.display = 'none';\n}\n\nexport function togglebox (selector: string, display: string = 'block'): boolean {\n  const element = forceQuerySelector<HTMLElement>(selector);\n  if (element.style.display === 'none') {\n    element.style.display = display;\n    return true;\n  } else {\n    element.style.display = 'none';\n    return false;\n  }\n}\n\nObject.assign(window, { openbox, closebox, togglebox });\n","export function roundFixed (num: number, fix: number = 2): number {\n  return Number(Number.prototype.toFixed.call(num, fix));\n}\n\nexport function clamp (min: number, value: number, max: number): number {\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n}\n\nexport function shuffleArrayInplace<T> (array: T[]): void {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nexport function shuffleArray<T> (array: T[]): T[] {\n  const newarray = Array.from(array);\n  shuffleArrayInplace(newarray);\n  return newarray;\n}\n","import { togglebox } from './openbox';\nimport { forceGetElementById, forceQuerySelector } from './util/forceQuerySelector';\nimport { shuffleArray } from './util/math';\n\nconst testBoxElement = forceGetElementById<HTMLDivElement>('test-box');\nconst testElements = Array.from(document.querySelectorAll<HTMLDivElement>('#test-box div'));\nconst scoreElement = forceGetElementById<HTMLSpanElement>('score');\nconst totalElement = forceGetElementById<HTMLSpanElement>('total');\n\nexport function shuffleTests (num = testElements.length): void {\n  for (const test of Array.from(testBoxElement.childNodes)) {\n    testBoxElement.removeChild(test);\n  }\n  const newTests = shuffleArray(testElements).slice(0, num);\n  for (const test of newTests) {\n    testBoxElement.appendChild(test);\n  }\n}\n\nexport function calculateScore (): void {\n  const currentTestElements = document.querySelectorAll<HTMLInputElement>('#test-box input');\n\n  let correct = 0;\n  currentTestElements.forEach(testElement => {\n    if (Number(testElement.value) === Number(testElement.dataset.right)) {\n      testElement.classList.add('correct');\n      testElement.classList.remove('incorrect');\n      correct++;\n    } else {\n      testElement.classList.remove('correct');\n      testElement.classList.add('incorrect');\n    }\n  });\n\n  scoreElement.innerText = String(correct);\n  totalElement.innerText = String(currentTestElements.length);\n}\n\nexport function clearTests (all = true): number {\n  const tests = all ? testElements : Array.from(document.querySelectorAll<HTMLDivElement>('#test-box div'));\n  for (const test of tests) {\n    const input = forceQuerySelector<HTMLInputElement>('input', test);\n    input.value = '';\n    input.classList.remove('correct', 'incorrect');\n  }\n  return tests.length;\n}\n\nexport function toggleboxTests (): boolean {\n  const enabled = togglebox('#box');\n  console.log('toggleboxTests', enabled);\n  if (enabled) {\n    shuffleTests();\n    return true;\n  } else {\n    clearTests();\n    return false;\n  }\n}\n\nObject.assign(window, {\n  testElements,\n  shuffleTests,\n  calculateScore,\n  clearTests,\n  toggleboxTests,\n});\n"]}