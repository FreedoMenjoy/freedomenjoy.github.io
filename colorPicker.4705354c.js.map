{"version":3,"sources":["scripts/colorPicker.ts"],"names":[],"mappings":"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","file":"colorPicker.4705354c.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nconst textElement = document.getElementById('text') as HTMLSpanElement;\nconst sliderRadiusElement = document.getElementById('radius') as HTMLInputElement;\nconst selectDistFnElement = document.getElementById('distFn') as HTMLOptionElement;\nconst fileInputElement = document.getElementById('fileInput') as HTMLInputElement;\nconst img = document.createElement('img');\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst canvas2d = canvas.getContext('2d')!;\n\nfunction roundFixed (num: number, fix: number = 2): number {\n  return Number(Number.prototype.toFixed.call(num, fix));\n}\n\nfunction addEventListenerMouseDownMove<T extends HTMLElement = HTMLElement> (target: T, whileMove: (e: MouseEvent) => any): void {\n  function endMove (): void {\n    window.removeEventListener('mousemove', whileMove);\n    window.removeEventListener('mouseup', endMove);\n  }\n\n  function startMove (event: MouseEvent): void {\n    event.stopPropagation(); // remove if you do want it to propagate ..\n    window.addEventListener('mousemove', whileMove);\n    window.addEventListener('mouseup', endMove);\n  }\n\n  target.addEventListener('mousedown', startMove);\n}\n\nfunction pixelMultEuclidean (dx: number, dy: number): number {\n  return 1 / (Math.sqrt(dx * dx + dy * dy) + 1);\n}\n\nfunction pixelMultEuclidean2 (dx: number, dy: number): number {\n  const mult = pixelMultEuclidean(dx, dy);\n  return mult * mult;\n}\n\nfunction pixelMultManhattan (dx: number, dy: number): number {\n  return 1 / (Math.abs(dx) + Math.abs(dy) + 1);\n}\n\nfunction pixelMultManhattan2 (dx: number, dy: number): number {\n  const mult = pixelMultManhattan(dx, dy);\n  return mult * mult;\n}\n\nfunction pixelMultConst (dx: number, dy: number): number {\n  return 1;\n}\n\nconst distFns = {\n  euclidean: pixelMultEuclidean,\n  euclidean2: pixelMultEuclidean2,\n  manhattan: pixelMultManhattan,\n  manhattan2: pixelMultManhattan2,\n  const: pixelMultConst,\n} as const;\n\ntype RGBColor = [r: number, g: number, b: number];\n\nfunction getCanvasRectColor (canvas: HTMLCanvasElement, x: number, y: number, { rectSize = 1, distFn = pixelMultEuclidean, canvas2d = canvas.getContext('2d')! } = {}): RGBColor & { rectX: number, rectY: number, rectW: number, rectH: number } {\n  let sumR = 0;\n  let sumG = 0;\n  let sumB = 0;\n  let avger = 0;\n  const rectX = Math.max(x - rectSize, 0);\n  const rectY = Math.max(y - rectSize, 0);\n  const rectW = Math.max(Math.min(canvas.width - x + rectSize, rectSize * 2 + 1, Math.min(x, rectSize) + rectSize + 1), 1);\n  const rectH = Math.max(Math.min(canvas.height - y + rectSize, rectSize * 2 + 1, Math.min(y, rectSize) + rectSize + 1), 1);\n  const data = canvas2d.getImageData(rectX, rectY, rectW, rectH).data;\n  for (let i = 0; i < data.length; i += 4) {\n    const di = i / 4;\n    const dx = rectX + (di % rectW) - x;\n    const dy = rectY + Math.floor(di / rectW) - y;\n    const R = data[i];\n    const G = data[i + 1];\n    const B = data[i + 2];\n    const mult = distFn(dx, dy);\n    sumR += R * R * mult;\n    sumG += G * G * mult;\n    sumB += B * B * mult;\n    avger += mult;\n  }\n  const color: RGBColor = [\n    Math.sqrt(sumR / avger),\n    Math.sqrt(sumG / avger),\n    Math.sqrt(sumB / avger),\n  ];\n  return Object.assign(color, { rectX, rectY, rectW, rectH });\n}\n\nfunction onFileInput (evt: Event): void {\n  const files = (evt.target as HTMLInputElement).files;\n  if (files == null) return;\n  const file = files[0];\n\n  if (!file.type.match('image.*')) return;\n\n  const reader = new FileReader();\n\n  reader.addEventListener('load', (e) => {\n    console.log('file', file, e, reader.result);\n    if (reader.result == null) return;\n    // Render thumbnail.\n    img.src = String(reader.result);\n    // img.title = theFile.name;\n\n    img.addEventListener('load', function onImageLoad () {\n      console.log(`img width:${img.width} height:${img.height}`);\n\n      const canvasRect = canvas.getBoundingClientRect();\n\n      // canvas.width = Math.max(img.width, 200);\n      // canvas.height = Math.max(img.height, 200);\n      canvas2d.drawImage(img, 0, 0, canvasRect.width, canvasRect.height);\n    });\n  });\n\n  // Read in the image file as a data URL.\n  reader.readAsDataURL(file);\n}\n\nfileInputElement.addEventListener('change', onFileInput);\n\nfunction onMouseMove (e: MouseEvent): void {\n  // canvas.width = img.width;\n  // canvas.height = img.height;\n  // canvas2d.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = Math.min(e.offsetX, img.width - 1);\n  const y = Math.min(e.offsetY, img.height - 1);\n  const rectSize = Math.floor(Number(sliderRadiusElement.value));\n  const distFn = Reflect.get(distFns, selectDistFnElement.value) ?? pixelMultEuclidean;\n  const color = getCanvasRectColor(canvas, x, y, { rectSize, distFn });\n  // textElement.innerText = `x:${x} y:${y} color:[${roundColors.join(', ')}] rectSize:${rectSize} distFn:${distFn.name} rect:[${color.rectX}, ${color.rectY}, ${color.rectW}, ${color.rectH}: ${color.rectX + color.rectW - 1}, ${color.rectY + color.rectH - 1}]`;\n  const hexColor = roundFixed(Math.round(color[0]), 0) * 0x10000 + roundFixed(Math.round(color[1]), 0) * 0x100 + roundFixed(Math.round(color[2]), 0);\n  textElement.innerText = `цвет: rgb(${color.map(c => Math.round(c)).join(', ')}) hex:#${hexColor.toString(16).padStart(6, '0')}`;\n  // document.body.style.backgroundColor = `rgb(${roundColors[0]},${roundColors[1]},${roundColors[2]})`;\n\n  // canvas2d.beginPath();\n  // canvas2d.lineWidth = 1;\n  // canvas2d.strokeStyle = 'red';\n  // canvas2d.rect(rectX, rectY, rectW, rectH);\n  // canvas2d.stroke();\n}\n\naddEventListenerMouseDownMove(canvas, onMouseMove);\n"]}