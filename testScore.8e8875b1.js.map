{"version":3,"sources":["scripts/util/forceQuerySelector.ts","scripts/util/math.ts","scripts/testScore.ts"],"names":[],"mappings":";AAgBkE,aAhBlE,SAAgB,EAAiD,EAAkB,QAAA,IAAA,IAAA,EAAA,UACjF,IAAM,EAAU,EAAO,cAAiB,GACxC,GAAe,MAAX,EACF,MAAM,IAAI,MAAM,GAAA,OAAG,EAAmB,KAAI,eAAA,OAAc,EAAQ,eAElE,OAAO,EAGT,SAAgB,EAAkD,EAAmB,QAAA,IAAA,IAAA,EAAA,UACnF,IAAM,EAAU,EAAO,eAAe,GACtC,GAAe,MAAX,EACF,MAAM,IAAI,MAAM,GAAA,OAAG,EAAoB,KAAI,SAAA,OAAQ,EAAS,eAE9D,OAAO,EAGyD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,QAAA,wBAAA,EAhBlE,QAAA,mBAAA,EAQA,QAAA,oBAAA,EAQA,OAAO,OAAO,OAAQ,CAAE,mBAAkB,EAAE,oBAAmB;;ACG/D,aAnBA,SAAgB,EAAY,EAAa,GACvC,YADuC,IAAA,IAAA,EAAA,GAChC,OAAO,OAAO,UAAU,QAAQ,KAAK,EAAK,IAGnD,SAAgB,EAAO,EAAa,EAAe,GACjD,OAAI,EAAQ,EAAY,EACpB,EAAQ,EAAY,EACjB,EAGT,SAAgB,EAAwB,GACtC,IAAK,IAAI,EAAI,EAAM,OAAS,EAAG,EAAI,EAAG,IAAK,CACzC,IAAM,EAAI,KAAK,MAAM,KAAK,UAAY,EAAI,IACpC,EAAO,EAAM,GACnB,EAAM,GAAK,EAAM,GACjB,EAAM,GAAK,GAIf,SAAgB,EAAiB,GAC/B,IAAM,EAAW,MAAM,KAAK,GAE5B,OADA,EAAoB,GACb,EAHT,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,oBAAA,QAAA,MAAA,QAAA,gBAAA,EAnBA,QAAA,WAAA,EAIA,QAAA,MAAA,EAMA,QAAA,oBAAA,EASA,QAAA,aAAA;;ACkBuD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,kBAAA,EArCvD,IAAA,EAAA,QAAA,6BACA,EAAA,QAAA,eAEM,GAAU,EAAA,EAAA,qBAAoC,YAC9C,EAAQ,MAAM,KAAK,SAAS,iBAAiC,kBAC7D,GAAe,EAAA,EAAA,qBAAqC,SACpD,GAAe,EAAA,EAAA,qBAAqC,SAE1D,SAAgB,EAAc,QAAA,IAAA,IAAA,EAAM,EAAM,QACxC,IAAmB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAO,CAArB,IAAM,EAAI,EAAA,GACb,EAAQ,YAAY,GAGtB,IADA,IACmB,EAAA,EAAA,GADF,EAAA,EAAA,cAAa,GAAO,MAAM,EAAG,GAC3B,EAAA,EAAA,OAAA,IAAU,CAAlB,EAAI,EAAA,GACb,EAAQ,YAAY,IAIxB,SAAgB,IACd,IAAM,EAAS,SAAS,iBAAmC,mBAEvD,EAAU,EACd,EAAO,QAAQ,SAAA,GACT,OAAO,EAAM,SAAW,OAAO,EAAM,QAAQ,QAC/C,EAAM,UAAU,IAAI,WACpB,EAAM,UAAU,OAAO,aACvB,MAEA,EAAM,UAAU,OAAO,WACvB,EAAM,UAAU,IAAI,gBAIxB,EAAa,UAAY,OAAO,GAChC,EAAa,UAAY,OAAO,EAAO,QA1BzC,QAAA,aAAA,EAUA,QAAA,eAAA,EAmBA,OAAO,OAAO,OAAQ,CAAE,aAAY,EAAE,eAAc","file":"testScore.8e8875b1.js","sourceRoot":"../src","sourcesContent":["export function forceQuerySelector<E extends Element = Element> (selector: string, origin: Pick<HTMLElement, 'querySelector'> = document): E {\n  const element = origin.querySelector<E>(selector);\n  if (element == null) {\n    throw new Error(`${forceQuerySelector.name}: selector ${selector} not found`);\n  }\n  return element;\n}\n\nexport function forceGetElementById<E extends Element = Element> (elementId: string, origin: NonElementParentNode = document): E {\n  const element = origin.getElementById(elementId);\n  if (element == null) {\n    throw new Error(`${forceGetElementById.name}: id ${elementId} not found`);\n  }\n  return element as E;\n}\n\nObject.assign(window, { forceQuerySelector, forceGetElementById });\n","export function roundFixed (num: number, fix: number = 2): number {\n  return Number(Number.prototype.toFixed.call(num, fix));\n}\n\nexport function clamp (min: number, value: number, max: number): number {\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n}\n\nexport function shuffleArrayInplace<T> (array: T[]): void {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nexport function shuffleArray<T> (array: T[]): T[] {\n  const newarray = Array.from(array);\n  shuffleArrayInplace(newarray);\n  return newarray;\n}\n","import { forceGetElementById } from './util/forceQuerySelector';\nimport { shuffleArray } from './util/math';\n\nconst testBox = forceGetElementById<HTMLDivElement>('test-box');\nconst tests = Array.from(document.querySelectorAll<HTMLDivElement>('#test-box div'));\nconst scoreElement = forceGetElementById<HTMLSpanElement>('score');\nconst totalElement = forceGetElementById<HTMLSpanElement>('total');\n\nexport function shuffleTests (num = tests.length): void {\n  for (const test of tests) {\n    testBox.removeChild(test);\n  }\n  const newTests = shuffleArray(tests).slice(0, num);\n  for (const test of newTests) {\n    testBox.appendChild(test);\n  }\n}\n\nexport function calculateScore (): void {\n  const inputs = document.querySelectorAll<HTMLInputElement>('#test-box input');\n\n  let correct = 0;\n  inputs.forEach(input => {\n    if (Number(input.value) === Number(input.dataset.right)) {\n      input.classList.add('correct');\n      input.classList.remove('incorrect');\n      correct++;\n    } else {\n      input.classList.remove('correct');\n      input.classList.add('incorrect');\n    }\n  });\n\n  scoreElement.innerText = String(correct);\n  totalElement.innerText = String(inputs.length);\n}\n\nObject.assign(window, { shuffleTests, calculateScore });\n"]}